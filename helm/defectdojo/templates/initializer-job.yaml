{{- if .Values.initializer.run  }}
{{- $fullName := include "defectdojo.fullname" . -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "initializer.jobname" . }}
  labels:
    defectdojo.org/component: initializer
    app.kubernetes.io/name: {{ include "defectdojo.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "defectdojo.chart" . }}
  annotations:
    {{- with .Values.initializer.jobAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  ttlSecondsAfterFinished: {{ .Values.initializer.keepSeconds }}
  template:
    metadata:
      labels:
        defectdojo.org/component: initializer
        app.kubernetes.io/name: {{ include "defectdojo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
      {{- with .Values.initializer.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- if .Values.admin.ssl }}
      initContainers:
        - name: init-database-cert
          image: busybox
          command:
            - sh
            - -c
            - cp -LR /app/dojo/mnt/* /app/dojo/local/ && chown -R 1001:1001 /app/dojo/local
              && chmod -R 777 /app/dojo/local && chmod -R 600 /app/dojo/local/certs/*
              && ls -la /app/dojo/local/certs/
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /app/dojo/mnt
              name: ssl-volume
            - mountPath: /app/dojo/local
              name: local-volume
      {{- end }}
      serviceAccountName: {{ $fullName }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      volumes:
      - name: run
        emptyDir: {}
      {{- if .Values.admin.ssl }}
      - name: local-volume
        emptyDir: { }
      - name: ssl-volume
        secret:
          secretName: psql-tls
          defaultMode: 0600
          items:
            - key: server-ca.pem
              path: certs/server-ca.pem
            - key: client-cert.pem
              path: certs/client-cert.pem
            - key: client-key.pem
              path: certs/client-key.pem
      {{- end }}
      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
        command: ["/cloud_sql_proxy"]
        args:
        - "-verbose={{ .Values.cloudsql.verbose }}"
        {{- if eq .Values.database "postgresql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.postgresql.primary.service.ports.postgresql }}"
        {{- else if eq .Values.database "mysql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.mysql.primary.service.ports.mysql }}"
        {{- end }}
        {{- if .Values.cloudsql.enable_iam_login }}
        - "-enable_iam_login"
        {{- end }}
        {{- if .Values.cloudsql.use_private_ip }}
        - "-ip_address_types=PRIVATE"
        {{- end }}
      {{- end }}
      - name: initializer
        image: "{{ template "initializer.repository" . }}:{{ .Values.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- toYaml .Values.securityContext.djangoSecurityContext | nindent 10 }}
        {{- end }}          
        command:
          - /entrypoint-initializer.sh
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        - secretRef:
            name: {{ $fullName }}
        env:
        - name: DD_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if eq .Values.database "postgresql" }}
              name: {{ .Values.postgresql.auth.existingSecret }}
              key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
              {{- else if eq .Values.database "postgresqlha" }}
              name: {{ .Values.postgresqlha.postgresql.existingSecret }}
              key: postgresql-postgres-password
              {{- else if eq .Values.database "mysql" }}
              name: {{ .Values.mysql.auth.existingSecret }}
              key: {{ .Values.mysql.auth.secretKey }}
              {{- end }}
        {{- if .Values.extraEnv }}
        {{- toYaml .Values.extraEnv | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.initializer.resources | nindent 10 }}
      restartPolicy: Never
      {{- with .Values.initializer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.initializer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.initializer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}
